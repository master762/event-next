// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String        @unique
  emailVerified    DateTime?
  password         String?
  image            String?       @default("/default-avatar.jpg")
  policyAccepted   Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  profile          Profile?
  accounts         Account[]
  sessions         Session[]
  Event            Event[]
  Participant      Participant[]
  Message          Message[]
  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  birthDate   DateTime?
  company     String?
  phone       String?
  gender      String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  coverImage   String?
  budget       Float?
  deadline     DateTime?
  participants Participant[]
  createdAt    DateTime      @default(now())
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?
  Task         Task[]
  EventTask    EventTask[]
}

model Participant {
  id      Int     @id @default(autoincrement())
  name    String
  email   String
  role    String
  subRole String?
  event   Event   @relation(fields: [eventId], references: [id])
  eventId Int
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  day       String
  startHour Int
  duration  Int
  color     String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())
}

model EventTask {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      String // "активна" или "выполнено"
  expenses    Float
  createdAt   DateTime @default(now())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int
}

model Message {
  id         String   @id @default(cuid())
  text       String
  time       DateTime @default(now())
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}
